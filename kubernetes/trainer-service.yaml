apiVersion: apps/v1
kind: Deployment
metadata:
  name: trainer-service-http
spec:
  selector:
    matchLabels:
      app: trainer-service-http
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
      labels:
        app: trainer-service-http
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-mysql
          image: busybox
          command:
          - 'sh'
          - '-c'
          - 'echo -e "Checking for the availability of MySQL Server deployment";
            while ! nc -z mysql-service 3306; do sleep 5; printf "-"; done; echo -e "  >> MySQL DB Server has started";'
      containers:
        - name: server
          image: trainer-service
          ports:
            - containerPort: 3000
          env:
          - name: SERVER_TO_RUN
            value: http
          envFrom:
          - configMapRef:
              name: server-env
---
apiVersion: v1
kind: Service
metadata:
  name: trainer-service-http
spec:
  type: NodePort
  selector:
    app: trainer-service-http
  ports:
    - name: http
      port: 3000
      targetPort: 3000
      nodePort: 30100
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trainer-service-grpc
spec:
  selector:
    matchLabels:
      app: trainer-service-grpc
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
      labels:
        app: trainer-service-grpc
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      initContainers:
        - name: wait-for-mysql
          image: busybox
          command:
            - 'sh'
            - '-c'
            - 'echo -e "Checking for the availability of MySQL Server deployment";
            while ! nc -z mysql-service 3306; do sleep 5; printf "-"; done; echo -e "  >> MySQL DB Server has started";'
      containers:
        - name: server
          image: trainer-service
          ports:
            - containerPort: 3000
          env:
            - name: SERVER_TO_RUN
              value: grpc
          envFrom:
            - configMapRef:
                name: server-env
---
apiVersion: v1
kind: Service
metadata:
  name: trainer-service-grpc
spec:
  type: ClusterIP
  selector:
    app: trainer-service-grpc
  ports:
    - name: grpc
      port: 3000
      targetPort: 3000